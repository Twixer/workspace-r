# source : http://www.r-bloggers.com/cobble-xpath-interactively-with-the-xmlview-package/
devtools::install_github("ramnathv/htmlwidgets") # we use some bleeding edge features
devtools::install_github("hrbrmstr/xmlview")
library(xml2)
library(xmlview)
# plain text XML
xml_view("<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>")
# read-in XML document
doc <- read_xml("http://www.npr.org/rss/rss.php?id=1001")
xml_view(doc, add_filter=TRUE)
xml_view(doc, add_filter=TRUE)
devtools::install_github("ramnathv/htmlwidgets")
devtools::install_github("hrbrmstr/xmlview")
library(xml2)
library(xmlview)
library(xml_view)
install.packages("digest")
library(xmlview)
devtools::install_github("hrbrmstr/xmlview")
library(xml2)
library(xmlview)
# plain text XML
xml_view("<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>")
# read-in XML document
doc <- read_xml("http://www.npr.org/rss/rss.php?id=1001")
xml_view(doc, add_filter=TRUE)
xml_view("<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>")
xml_view(doc, add_filter=TRUE)
doc <- read_xml("data/affaire.wsdl")
setwd("D:/applis/workspace-r/quick-and-dirty")
doc <- read_xml("data/affaire.wsdl")
xml_view(doc, add_filter=TRUE)
help("xmlview-package")
vignette("xmlview-package")
xml_view(doc, add_filter=TRUE)
source('D:/applis/workspace-r/quick-and-dirty/scripts/gantt_ggplot_from_csv.R')
library("googleVis")
library("ggvis")
library("googleVis")
install.packages("googleVis")
library("googleVis")
datTL <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)),
Name=c("Washington", "Adams", "Jefferson",
"Adams", "Jefferson", "Burr"),
start=as.Date(x=rep(c("1789-03-29", "1797-02-03",
"1801-02-03"),2)),
end=as.Date(x=rep(c("1797-02-03", "1801-02-03",
"1809-02-03"),2)))
Timeline <- gvisTimeline(data=datTL,
rowlabel="Name",
barlabel="Position",
start="start",
end="end",
options=list(timeline="{groupByRowLabel:false}",
backgroundColor='#ffd',
height=350,
colors="['#cbb69d', '#603913', '#c69c6e']"))
plot(Timeline)
View(datTL)
rawschedule <- read.csv("jobs.csv", header = TRUE, sep=";")
setwd("D:/applis/workspace-r/grdf-sid-jobs/")
rawschedule <- read.csv("jobs.csv", header = TRUE, sep=";")
rawschedule <- read.csv("data/jobs.csv", header = TRUE, sep=";")
setwd("D:/applis/workspace-r/quick-and-dirty")
rawschedule <- read.csv("data/jobs.csv", header = TRUE, sep=";")
tasks <- c(t(rawschedule["TYPEJOB"]))
dfr <- data.frame(
name        = factor(tasks, levels = tasks),
start.date  = c(rawschedule["DEBUT"]),
end.date    = c(rawschedule["FIN"]),
is.critical = c(rawschedule["ETAT"])
)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
#generates the plot
ggplot(mdfr, aes(as.Date(value, "%m/%d/%Y %H:%M:%S"), name, colour = Critical)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Tasks") +
theme_bw()
library("ggplot2")
ggplot(mdfr, aes(as.Date(value, "%m/%d/%Y %H:%M:%S"), name, colour = Critical)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Tasks") +
theme_bw()
library("reshape")
library(reshape2)
mdfr <- melt(dfr, measure.vars = c("Start", "Finish"))
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
dfr <- data.frame(
name        = factor(tasks, levels = tasks),
start.date  = c(rawschedule["DEBUT"]),
end.date    = c(rawschedule["FIN"]),
is.critical = c(rawschedule["ETAT"])
)
setwd("D:/applis/workspace-r/quick-and-dirty")
library(ggplot2)
library(reshape2)
rawschedule <- read.csv("data/jobs.csv", header = TRUE, sep=";")
View(rawschedule)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN", "ETAT"))
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN", "ETAT"))
dfr <- data.frame(
jobs        = factor(tasks, levels = tasks),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat = c(rawschedule["ETAT"])
)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN", "ETAT"))
jobs <- c(t(rawschedule["TYPEJOB"]))
dfr <- data.frame(
jobs        = factor(tasks, levels = tasks),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat = c(rawschedule["ETAT"])
)
dfr <- data.frame(
jobs   = factor(tasks, levels = jobs),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat   = c(rawschedule["ETAT"])
)
jobs   = factor(jobs, levels = jobs),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat   = c(rawschedule["ETAT"])
)
dfr <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat   = c(rawschedule["ETAT"])
)
jobs <- c(t(rawschedule["TYPEJOB"]))
dfr <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat   = c(rawschedule["ETAT"])
)
View(dfr)
View(rawschedule)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
dfr <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = c(rawschedule["DEBUT"]),
fin    = c(rawschedule["FIN"]),
etat   = c(rawschedule["ETAT"])
)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
#generates the plot
ggplot(mdfr, aes(as.Date(value, "%m/%d/%Y %H:%M:%S"), name, colour = etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Tasks") +
theme_bw()
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
View(mdfr)
View(dfr)
factor(jobs, levels = jobs)
jobs <- c(t(rawschedule["TYPEJOB"]))
factor(jobs, levels = jobs)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
raw_data <- read.csv("data/jobs.csv", header = TRUE, sep=";")
jobs <- c(t(raw_data["TYPEJOB"]))
dfr <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
View(mdfr)
View(raw_data)
View(mdfr)
rawschedule <- read.csv("data/jobs_prod.csv", header = TRUE, sep = ";")
summary(rawschedule)
tasks <- c(t(rawschedule["TYPEJOB"]))
status <- c(t(rawschedule["ETAT"]))
dfr <- data.frame(
name        = factor(tasks, levels = tasks),
start.date  = c(rawschedule["DEBUT"]),
end.date    = c(rawschedule["FIN"]),
status = factor(status, level = status))
mdfr <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
View(mdfr)
View(mdfr)
ggplot(mdfr, aes(as.Date(value, "%m/%d/%Y %H:%M:%S"), jobs, colour = etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Tasks") +
theme_bw()
melted_jobs <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
View(melted_jobs)
ggplot(melted_jobs, aes(as.Date(value, "%m/%d/%Y %H:%M:%S"), jobs, colour = etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
as.Date(melted_jobs["value"], "%m/%d/%Y %H:%M:%S")
as.Date(melted_jobs["value"], "%m/%d/%Y %H:%M:%S")
melted_jobs["value"]
as.Date(melted_jobs["value"], "%m/%d/%Y %H:%M:%S")
as.Date(melted_jobs["value"], "%d/%m/%Y %H:%M:%S")
as.Date(melted_jobs["value"], "%d/%m/%y %H:%M:%S")
as.Date("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S")
strftime("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S")
strftime(melted_jobs["value"], "%d/%m/%y %H:%M:%S")
strftime(melted_jobs["value"], "%d/%m/%y %H:%M:%S")
strftime("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S") # OK
strftime(melted_jobs["value"], "%d/%m/%y %H:%M:%S")
ggplot(melted_jobs, aes(strftime(value, "%d/%m/%y %H:%M:%S"), jobs, colour = etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
View(melted_jobs)
ggplot(melted_jobs, aes(x = strftime(value, "%d/%m/%y %H:%M:%S"), y= name, colour = etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
View(melted_jobs)
raw_data <- read.csv("data/jobs.csv", header = TRUE, sep=";")
jobs <- c(t(raw_data["TYPEJOB"]))
dfr <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
melted_jobs <- melt(dfr, measure.vars = c("DEBUT", "FIN"))
View(melted_jobs)
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=name, colour=ETAT)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
View(raw_data)
View(melted_jobs)
View(dfr)
View(dfr)
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=ETAT)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
raw_data <- read.csv("data/jobs.csv", header = TRUE, sep=";")
jobs <- c(t(raw_data["TYPEJOB"]))
df <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = strftime(c(raw_data["DEBUT"]), "%d/%m/%y %H:%M:%S"),
fin    = strftime(c(raw_data["FIN"]), "%d/%m/%y %H:%M:%S"),
etat   = c(raw_data["ETAT"])
)
df <- data.frame(
jobs   = factor(jobs, levels = jobs),
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
df <- data.frame(row.names = c("jobs", "debut", "fin", "etat"),
jobs   = factor(jobs, levels = jobs),
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
View(raw_data)
df <- data.frame(row.names = c("jobs", "debut", "fin", "etat"),
jobs   = jobs,
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
df <- data.frame(#row.names = c("jobs", "debut", "fin", "etat"),
jobs   = jobs,
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
View(df)
colnames(df)
colnames(df) <- c("jobs", "debut", "fin", "etat")
head(df)
df$debut <- strftime(df$debut), "%d/%m/%y %H:%M:%S")
df$debut <- strftime(df$debut, "%d/%m/%y %H:%M:%S")
View(df)
View(df)
df$debut <- strptime(df$debut, "%d/%m/%y %H:%M:%S")
df$fin <- strptime(df$fin, "%d/%m/%y %H:%M:%S")
lt = strftime("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S")
format(lt, format"%d-%m-%y")
format(lt, format="%d-%m-%y")
strftime(lt, format="%d-%m-%y")
typeof(strftime(lt, format="%d-%m-%y"))
str_date <- strftime(lt, format="%d-%m-%y")
typeof(str_date)
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S")
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
df <- data.frame(
jobs   = jobs,
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
colnames(df) <- c("jobs", "debut", "fin", "etat")
# columns (debut, fin) to date time
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
View(df)
df$fin <- strptime(df$fin, "%d/%m/%y %H:%M:%S")
View(df)
data.frame
data.frame
data.frame
data.frame
df <- data.frame(
jobs   = jobs,
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
colnames(df) <- c("jobs", "debut", "fin", "etat")
# columns (debut, fin) to date time
#http://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code.html
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
df$fin <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
View(df)
df_one_day <- df[strftime(lt, format="%d-%m-%y")="2014-07-29"]
df_one_day <- df[strftime(lt, format="%d-%m-%y")=="2014-07-29"]
View(df_one_day)
df_one_day <- df[strftime(lt, format="%d-%m-%y")=="2014-07-29",]
View(df_one_day)
View(raw_data)
View(df_one_day)
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="2014-07-29",]
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="2014-07-29",]
?subset
subset(df,strftime(debut, format="%d-%m-%y")=="2014-07-29", )
strftime(df$debut, format="%d-%m-%y")=="2014-07-29"
strftime(df$debut, format="%d-%m-%y")="2014-07-29"
strftime(df$debut, format="%d-%m-%y")=="2014-07-29"
strftime(df$debut, format="%d-%m-%y")
strftime(df$debut, format="%d-%m-%y")=="29-07-14"
subset(df,strftime(debut, format="%d-%m-%y")=="29-07-14", )
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="29-07-14",]
View(df_one_day)
melted_jobs <- melt(df_one_day, measure.vars = c("debut", "fin"))
View(melted_jobs)
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=ETAT)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw() +
opts(axis.text.x=theme_text(angle=90, hjust=1))
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw() +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
df_one_day$debut
sort(df_one_day$debut)
df_one_day <- df_one_day[sort(df$debut),]
View(df)
View(df_one_day)
df_one_day <- df_one_day[sort(df_one_day$debut),]
df <- data.frame(
jobs   = jobs,
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
colnames(df) <- c("jobs", "debut", "fin", "etat")
# columns (debut, fin) to date time
#http://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code.html
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
df$fin <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="29-07-14",]
# filter one day
#another way to do this :
#df_one_day <- subset(df,strftime(debut, format="%d-%m-%y")=="29-07-14", )
df_one_day <- df_one_day[sort(df_one_day$debut),]
View(df_one_day)
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="29-07-14",]
View(df_one_day)
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="29-07-14",]
#another way to do this :
#df_one_day <- subset(df,strftime(debut, format="%d-%m-%y")=="29-07-14", )
df_one_day <- df_one_day[order(df_one_day$debut),]
View(df_one_day)
melted_jobs <- melt(df_one_day, measure.vars = c("debut", "fin"))
# debug
sort(df_one_day$debut)
order(df_one_day$debut)
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw() +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
opts(axis.text.x=theme_text(angle=90, hjust=1))
ggplot(melted_jobs, aes(x=strftime(value, "%d/%m/%y %H:%M:%S"), y=jobs, colour=etat)) +
geom_line(size = 6) +
theme_bw() +
xlab("Duration") + ylab("Jobs") +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
ggplot(melted_jobs, aes(x=value, y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw() +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
ggplot(melted_jobs, aes(x=value, y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()
ggplot(melted_jobs, aes(x=value, y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()+
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
install.packages(c("Amelia", "curl", "ggplot2", "git2r", "knitr", "MASS", "Matrix", "mgcv", "microbenchmark", "plotly", "qdapRegex", "RcppArmadillo", "rJava", "rmarkdown", "roxygen2", "rstudioapi", "sp", "stringdist", "stringi", "viridis", "xtable"))
library(ggplot2)
library(reshape2)
library(dplyr)
library(stringr)
library(tidyr)
# Modify the "sample.csv" to be the name of your file target.
# HEADERS of jobs.csv : TYPEJOB	DEBUT	FIN	DUREE_SEC	DUREE_SEC_MS	ETAT
raw_data <- read.csv("data/jobs.csv", header = TRUE, sep=";")
#jobs <- c(t(raw_data["TYPEJOB"]))
df <- data.frame(
jobs   = jobs,
debut  = c(raw_data["DEBUT"]),
fin    = c(raw_data["FIN"]),
etat   = c(raw_data["ETAT"])
)
colnames(df) <- c("jobs", "debut", "fin", "etat")
# columns (debut, fin) to date time
#http://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code.html
df$debut <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
df$fin <- as.POSIXct(df$debut, "%d/%m/%y %H:%M:%S", tz = "GMT")
# filter one day
df_one_day <- df[strftime(df$debut, format="%d-%m-%y")=="29-07-14",]
#another way to do this :
#df_one_day <- subset(df,strftime(debut, format="%d-%m-%y")=="29-07-14", )
df_one_day <- df_one_day[order(df_one_day$debut),]
# Melt data on
melted_jobs <- melt(df_one_day, measure.vars = c("debut", "fin"))
# debug
# as.Date(melted_jobs["value"], "%d/%m/%y %H:%M:%S") # KO
# as.Date("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S")  # KO
# strftime("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S") # OK
# strftime(melted_jobs["value"], "%d/%m/%y %H:%M:%S") # KO
#
# lt = strftime("01/08/14 16:01:57", "%d/%m/%y %H:%M:%S")
# str_date <- strftime(lt, format="%d-%m-%y")
# typeof(str_date)
# end debug
#generates the plot
ggplot(melted_jobs, aes(x=value, y=jobs, colour=etat)) +
geom_line(size = 6) +
xlab("Duration") + ylab("Jobs") +
theme_bw()+
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
library("Amelia", lib.loc="D:/dev/R/R-3.2.2/library")
detach("package:Amelia", unload=TRUE)
library("assertthat", lib.loc="D:/dev/R/R-3.2.2/library")
